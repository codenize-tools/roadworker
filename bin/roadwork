#!/usr/bin/env ruby
$: << File.expand_path("#{File.dirname __FILE__}/../lib")
require 'rubygems'
require 'roadworker'
require 'optparse'
require 'logger'

MAGIC_COMMENT = <<-EOS
# -*- mode: ruby -*-
# vi: set ft=ruby :
EOS

DEFAULT_ROUTEFILE = 'Routefile'

mode = nil
file = DEFAULT_ROUTEFILE
output_file = '-'
split = false

logger = Logger.new($stdout)

logger.formatter = proc {|severity, datetime, progname, msg|
  "#{msg}\n"
}

options = {
  :logger      => logger,
  :dry_run     => false,
  :force       => false,
  :with_soa_ns => false,
  :color       => true,
  :debug       => false,
}

ARGV.options do |opt|
  begin
    access_key = nil
    secret_key = nil
    profile_name = nil
    credentials_path = nil

    opt.on('-p', '--profile PROFILE_NAME')       {|v| profile_name                 = v       }
    opt.on(''  , '--credentials-path PATH')      {|v| credentials_path             = v       }
    opt.on('-k', '--access-key ACCESS_KEY')      {|v| access_key                   = v       }
    opt.on('-s', '--secret-key SECRET_KEY')      {|v| secret_key                   = v       }
    opt.on('-a', '--apply')                      {    mode                         = :apply  }
    opt.on('-f', '--file FILE')                  {|v| file                         = v       }
    opt.on('',   '--dry-run')                    {    options[:dry_run]            = true    }
    opt.on(''  , '--force')                      {    options[:force]              = true    }
    opt.on('',   '--no-health-check-gc')         {    options[:no_health_check_gc] = true    }
    opt.on('-e', '--export')                     {    mode                         = :export }
    opt.on('-o', '--output FILE')                {|v| output_file                  = v       }
    opt.on('',   '--split')                      {    split                        = true    }
    opt.on('',   '--with-soa-ns')                {    options[:with_soa_ns]        = true    }
    opt.on('-t', '--test')                       {    mode                         = :test   }
    opt.on(''  , '--nameservers SERVERS', Array) {|v| options[:nameservers]        = v       }
    opt.on(''  , '--port PORT', Integer)         {|v| options[:port]               = v       }
    opt.on(''  , '--no-color')                   {    options[:color]              = false   }
    opt.on(''  , '--debug')                      {    options[:debug]              = true    }
    opt.parse!

    aws_opts = {}
    if access_key and secret_key
      aws_opts[:access_key_id] = access_key
      aws_opts[:secret_access_key] = secret_key
    elsif profile_name or credentials_path
      credentials_opts = {}
      credentials_opts[:profile_name] = profile_name if profile_name
      credentials_opts[:path] = credentials_path if credentials_path
      provider = AWS::Core::CredentialProviders::SharedCredentialFileProvider.new(credentials_opts)
      aws_opts[:credential_provider] = provider
    elsif (access_key and !secret_key) or (!access_key and secret_key) or mode.nil?
      puts opt.help
      exit 1
    end
    AWS.config(aws_opts)
  rescue => e
    $stderr.puts e
    exit 1
  end
end

if options[:debug]
  AWS.config(
    :http_wire_trace => true,
    :logger => options[:logger]
  )
end

begin
  logger = options[:logger]
  logger.level = options[:debug] ? Logger::DEBUG : Logger::INFO

  client = Roadworker::Client.new(options)

  case mode
  when :export
    if split
      logger.info('Export Route53')

      output_file = DEFAULT_ROUTEFILE if output_file == '-'
      output_file = File.join(output_file, DEFAULT_ROUTEFILE) if File.directory?(output_file)
      requires = []

      client.export do |exported, converter|
        exported[:hosted_zones].each do |zone|
          route_file = File.join(File.dirname(output_file), "#{zone[:name].sub(/\.\Z/, '')}.route")
          requires << route_file

          logger.info("  write `#{route_file}`")

          open(route_file, 'wb') do |f|
            f.puts MAGIC_COMMENT
            f.puts converter.call({
              :hosted_zones => [zone],
              :health_checks => exported[:health_checks],
            })
          end
        end
      end

      logger.info("  write `#{output_file}`")

      open(output_file, 'wb') do |f|
        f.puts MAGIC_COMMENT

        requires.each do |route_file|
          f.puts "require '#{File.basename route_file}'"
        end
      end
    else
      exported = client.export

      if output_file == '-'
        logger.info('# Export Route53')
        puts client.export
      else
        logger.info("Export Route53 to `#{output_file}`")
        open(output_file, 'wb') do |f|
          f.puts MAGIC_COMMENT
          f.puts client.export
        end
      end
    end
  when :test
    unless File.exist?(file)
      raise "No Routefile found (looking for: #{file})"
    end

    examples, failures = client.test(file)
    examples_message = (examples > 1 ? "%d examples" : "%d example") % examples
    failures_message = (failures > 1 ? "%d failures" : "%d failure") % failures
    result_message = [examples_message, failures_message].join(', ')

    if failures.zero?
      logger.info(result_message.green)
    else
      logger.info(result_message.red)
      exit 1
    end
  when :apply
    unless File.exist?(file)
      raise "No Routefile found (looking for: #{file})"
    end

    msg = "Apply `#{file}` to Route53"
    msg << ' (dry-run)' if options[:dry_run]
    logger.info(msg)

    updated = client.apply(file)

    logger.info('No change'.intense_blue) unless updated
  else
    raise 'must not happen'
  end
rescue => e
  if options[:debug]
    raise e
  else
    $stderr.puts e
    exit 1
  end
end
